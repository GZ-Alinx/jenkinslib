#!groovy
// jenkins共享库引入，在jenkns中配置
@Library('jenkinslibrary@master') _
import hudson.model.*


// 共享库方法引用，结合jenkins共享库引入
def mail =  new org.devops.mail()

// 参数定义
env.var1 = ""
environment {
    env.test = ""
}


pipeline {
    // 构建节点
    agent {
        node {
            label "node1"
        }
    }
    另外一种写法
    agent "node1"

    // 触发器
    triggers {
        // 计划任务执行
        cron('00 02 * * *')
        // 周期性检查代码仓库变化
        pollSCM('* * * * *')
    }

    // 流水线配置
    options {
        // 禁止同时执行
        disableConcurrentBuilds()
        // 流水线超时时间
        timeout(time: 120,unit: 'MINUTES')
    }

    // 流水线参数
    parameters {
        // 字符串参数
        string(name: "参数名称(key值)", defaultValue: "默认参数", description: "说明")

        // 文本参数
        text(name: "参数名称(key值)", defaultValue: "默认参数", description: "说明")

        // 布尔类型参数
        booleanParam(name: "bool", defaultValue: true, description: "说明")

        // 选择参数
        choice(description: "说明", name: "参数名称", choices:['a1','b2','c3'])

        // 文件参数
        file(name: "file", description: "说明")

        // 密码参数
        password(name: 'password', defaultValue: "123", description: "说明")
    }

    stages {
        stage('步骤1') {
            agent {
                label "node1"
            }
            steps {
                script {
                    println "具体实现方法"
                    input "我是卡点"
                }
            }
        }
        stage('步骤2') {
            steps {
                script {
                    println "具体实现方法"
                    env.action = input message: "提示",ok:'确认',parameters:[具体参数类型];
                    // 相当于将后面的值赋给签名的变量
                    env.action = input message: "提示",ok:'确认',parameters:[
                    choice(description: "说明", name: "请选择", choices:['yes','no'],trim:false))
                }
            }
        }
        stage('步骤3'){
            steps {
                script {
                    if(env.action == 'yes') {
                        println "yes"
                    }else {
                        println "no"
                    }
                }
            }
        }
    }

    // 根据流水线操作进行操作
    post {
        always {
            script{
                println "总是会执行"
            }
        }
        success {
            script{
                println "成功后会执行"
            }
        }
        failure {
            script{
                println "失败后执行"
            }
        }
        aborted {
            script{
                println "取消后会执行"
            }
        }
    }
}



